houseB.rec <- frec.comp(houseB.P1.f, houseB.P2.f)
houseA.rec <- mutate(houseA.rec, P1=P1/60, P2=P2/60)
houseA.rec.m <- mutate(houseA.rec, P2=-P2)
houseA.rec.m <- melt(houseA.rec.m)
names(houseA.rec.m) <- c("Actividad", "Persona", "Tiempo")
(p <- ggplot(houseA.rec.m,
aes(Actividad, Tiempo, fill=Persona)) +
geom_bar(data=subset(houseA.rec.m, Persona=="P1"), stat="identity") +
geom_bar(data=subset(houseA.rec.m, Persona=="P2"), stat="identity") +
labs(title = "Time spento to recreative activities", x = "") +
scale_y_continuous(breaks = seq(-500, 200, 100),
labels = paste(as.character(c(seq(500, 0, -100),
seq(100, 200, 100))), "h")) +
scale_x_discrete(limit=rec) +
coord_flip() +
theme_stata() + scale_fill_stata())
ggsave(filename="comparacion_recreacion_CasaA.png",
plot=p,
path=images.path)
houseB.rec <- mutate(houseB.rec, P1=P1/60, P2=P2/60)
houseB.rec.m <- mutate(houseB.rec, P2=-P2)
houseB.rec.m <- melt(houseB.rec.m)
names(houseB.rec.m) <- c("Actividad", "Persona", "Tiempo")
(p <- ggplot(houseB.rec.m,
aes(Actividad, Tiempo, fill=Persona)) +
geom_bar(data=subset(houseB.rec.m, Persona=="P1"), stat="identity") +
geom_bar(data=subset(houseB.rec.m, Persona=="P2"), stat="identity") +
labs(title = "Time spento to recreative activities", x = "") +
scale_y_continuous(breaks = seq(-800, 300, 75),
labels = paste(as.character(c(seq(800, 0, -75),
seq(75, 300, 75))), "h")) +
scale_x_discrete(limit=rec) +
coord_flip() +
theme_stata() + scale_fill_stata())
(p <- ggplot(houseA.rec.m,
aes(Actividad, Tiempo, fill=Persona)) +
geom_bar(data=subset(houseA.rec.m, Persona=="P1"), stat="identity") +
geom_bar(data=subset(houseA.rec.m, Persona=="P2"), stat="identity") +
labs(title = "Time spento to recreative activities", x = "") +
scale_y_continuous(breaks = seq(-500, 200, 100),
labels = paste(as.character(c(seq(500, 0, -100),
seq(100, 200, 100))), "h")) +
scale_x_discrete(limit=rec) +
coord_flip() +
theme_stata() + scale_fill_stata())
ggsave(filename="comparacion_recreacion_CasaA.png")
(p <- ggplot(houseB.rec.m,
aes(Actividad, Tiempo, fill=Persona)) +
geom_bar(data=subset(houseB.rec.m, Persona=="P1"), stat="identity") +
geom_bar(data=subset(houseB.rec.m, Persona=="P2"), stat="identity") +
labs(title = "Time spento to recreative activities", x = "") +
scale_y_continuous(breaks = seq(-800, 300, 75),
labels = paste(as.character(c(seq(800, 0, -75),
seq(75, 300, 75))), "h")) +
scale_x_discrete(limit=rec) +
coord_flip() +
theme_stata() + scale_fill_stata())
ggsave(filename="comparacion_recreacion_CasaB.png")
setwd(repo.dir)
# LibrerÃ­as
library(dplyr)
library(plyr)
library(purrr)
library(data.table)
library(ggplot2)
library(zoo) # install.packages("zoo")
# FunciÃ³n para agregar una columna de dÃ­a
insertar.dia <- function(df, start, end, interval) {
days.nested <- lapply(seq(start,end), rep, interval)
days.flatten <- do.call(c, days.nested)
df <- mutate(df, day=days.flatten)
# Agregar columna de dÃ­a
return(df)
}
# FunciÃ³n para realizar frecuencia acomulada por dÃ­a por persona PROBANDO
freq.tb <- function(col.act, group.by, start, end) {
ds <- tapply(col.act, group.by, FUN = count, simplify = TRUE, default = NA)
ds <- Reduce(function(x,y)merge(x,y,by="x",all=TRUE), ds)
ds[is.na(ds)] <- 0
ds <- as.data.frame(ds)
names(ds) <- c('Activities', seq(start,end))
rownames(ds) <- ds$Activities
return(ds)
}
# FunciÃ³n para realizar frecuencia acomulada por dÃ­a por persona ERROR
freq.tb <- function(col.act, group.by, start, end) {
ds <- tapply(col.act, group.by, FUN = count, simplify = TRUE)
ds <- Map(cbind, ds, seq(start,end))
ds <- rbindlist(lapply(ds, rbind, use.names=FALSE))
ds <- as.data.frame(ds)
ds <- na.omit(ds)
names(ds) <- c('Activities', 'Freq', 'day')
return(ds)
}
# ImportaciÃ³n de datasets
houseA <- read.csv("data/Time/houseA_time.csv")
houseB <- read.csv("data/Time/houseB_time.csv")
# Insertar columna de dÃ­a
houseA <- insertar.dia(houseA, start=1, end=30, interval=86400)
houseB <- insertar.dia(houseB, start=1, end=30, interval=86400)
# Tablas de frecuencia de actividad del dÃ­a 1 al 30
houseA.p1.freq <- freq.tb(houseA$P1, houseA$day, 1, 30)
houseA.p2.freq <- freq.tb(houseA$P2, houseA$day, 1, 30)
houseB.p1.freq <- freq.tb(houseB$P1, houseA$day, 1, 30)
houseB.p2.freq <- freq.tb(houseB$P2, houseA$day, 1, 30)
setwd("data/Frequency")
write.csv(houseA.p1.freq , file='houseA-p1-freqbyday.csv', row.names=FALSE)
write.csv(houseA.p2.freq , file='houseA-p2-freqbyday.csv', row.names=FALSE)
write.csv(houseB.p1.freq , file='houseB-p1-freqbyday.csv', row.names=FALSE)
write.csv(houseB.p2.freq , file='houseB-p2-freqbyday.csv', row.names=FALSE)
# LibrerÃ­as
library(dplyr)
library(plyr)
library(purrr)
library(data.table)
library(ggplot2)
library(zoo) # install.packages("zoo")
library(ggthemes) # install.packages("ggthemes")
# Directorio de trabajo
repo.dir <- "C:/Users/luisf/Github/SmartHome-DataAnalytics"
setwd(repo.dir)
setwd("02_TimeSeries")
# Funciones
# FunciÃ³n para crear una serie univariada
ts.univar <- function(df, actividad, start_, frecuency_) {
# Filtering activity
df <- df[df$Activities==actividad,]
vector <- t(as.vector(select(df, 2:31)))
# Convertimos los datos en serie de tiempo con el comando ts
tsb <- ts(vector,  start=1,  frequency = frecuency_)
# Verificamos Inicio, fin y frecuencia de la serie
start(tsb); end(tsb); frequency(tsb)  # Inicio, fin y frecuencia de la serie
# Regresamos la serie de tiempo
return(tsb)
}
# Funcion para guardar graficas
ts.plot.save <- function(ts1, titulo_, ylab_, xlab_, dir) {
png(paste(dir,".png",sep=''))
P <- autoplot(as.zoo(ts1), facet=NULL) + theme_stata() + scale_fill_stata()  + ylab(ylab_) + xlab(xlab_) + ggtitle(titulo_)
print(P)
dev.off()
return(P)
}
# Funcion para crear graficas
ts.plot <- function(tss) {
P <- autoplot(as.zoo(tss)/3600, facet=NULL) + theme_stata() + scale_fill_stata()  + ylab('Tiempo acomulado (h)') + xlab('Semana') + ggtitle("Serie de tiempo acomulado por dÃ­a")
return(P)
}
# FunciÃ³n para crear una serie multivariada
ts.multivar <- function(df, activities, start_, frecuency_) {
sdf <- subset(df, Activities %in% activities)
rownames(sdf) <- sdf$Activities
sdf <- select(sdf, 2:31)
sdf <- t(sdf)
# Convertimos los datos en serie de tiempo con el comando ts
tsb <- ts(sdf, start = start_, frequency = frecuency_)
return(tsb)
}
# Buscador de relaciones de actividad por persona en una casa
dash.ts.act <- function(house, person, activity) {
if(house=='A'){
if(person=='P1'){
P1 <- ts.univar(houseA.p1.freq,activity,1,7)
return(ts.plot(P1))
}else if (person=='P2') {
P2 <- ts.univar(houseA.p2.freq,activity,1,7)
return(ts.plot(P2))
}
}
if(house=='B'){
if(person=='P1'){
P1 <- ts.univar(houseB.p1.freq,activity,1,7)
return(ts.plot(P1))
}else if (person=='P2') {
P2 <- ts.univar(houseB.p2.freq,activity,1,7)
return(ts.plot(P2))
}
}
}
# Buscador de relaciones de actividad por persona en una casa
dash.dec.act <- function(house, person, activity) {
if(house=='A'){
if(person=='P1'){
P1 <- ts.univar(houseA.p1.freq,activity,1,7)
return(plot(decompose(P1)))
}else if (person=='P2') {
P2 <- ts.univar(houseA.p2.freq,activity,1,7)
return(plot(decompose(P2)))
}
}
if(house=='B'){
if(person=='P1'){
P1 <- ts.univar(houseB.p1.freq,activity,1,7)
return(plot(decompose(P1)))
}else if (person=='P2') {
P2 <- ts.univar(houseB.p2.freq,activity,1,7)
return(plot(decompose(P2)))
}
}
}
# Buscador de relaciones por casa
dash.ts.act.pers <- function(house,p1, act1, p2, act2) {
if(house=='A'){
if(p1=='P1'){
ts1 <- ts.univar(houseA.p1.freq,act1,1,7)
}else if (p1=='P2') {
ts1 <- ts.univar(houseA.p2.freq,act1,1,7)
}
if(p2=='P1'){
ts2 <- ts.univar(houseA.p1.freq,act2,1,7)
}else if (p2=='P2') {
ts2 <- ts.univar(houseA.p2.freq,act2,1,7)
}
}
if(house=='B'){
if(p1=='P1'){
ts1 <- ts.univar(houseB.p1.freq,act1,1,7)
}else if (p1=='P2') {
ts1 <- ts.univar(houseB.p2.freq,act1,1,7)
}
if(p2=='P1'){
ts2 <- ts.univar(houseB.p1.freq,act2,1,7)
}else if (p2=='P2') {
ts2 <- ts.univar(houseB.p2.freq,act2,1,7)
}
}
return(ts.plot(cbind(ts1,ts2)))
}
## Importamos datos
houseA <- read.csv("data/Time/houseA_time.csv")
## Importamos datos
houseA <- read.csv("../data/Time/houseA_time.csv")
houseB <- read.csv("../data/Time/houseB_time.csv")
View(houseA)
## Importamos datos
houseA <- read.csv("../data/Time/houseA.csv")
houseB <- read.csv("../data/Time/houseB.csv")
View(houseA)
## Serie de actividades por persona por dÃ­a del dÃ­a 1 al 30
houseA.P1.ts.act <- ts(as.vector(t(houseA$P1_code)), start=1, end=7, frequency=86400)
houseA.P2.ts.act <- ts(as.vector(t(houseA$P2_code)), start=1, end=7, frequency=86400)
houseB.P1.ts.act <- ts(as.vector(t(houseB$P1_code)), start=1, end=7, frequency=86400)
houseB.P2.ts.act <- ts(as.vector(t(houseB$P2_code)), start=1, end=7, frequency=86400)
# Observamos las graficas histÃ³ricas de las actividades por persona
ts.plot.save(houseA.P1.ts.act, "HistÃ³rico actividad casa A persona 1", "Actividad", "Semanas", "houseA-P1-historico")
ts.plot.save(houseA.P2.ts.act, "HistÃ³rico actividad casa A persona 2", "Actividad", "Semanas", "houseA-P2-historico")
ts.plot.save(houseB.P1.ts.act, "HistÃ³rico actividad casa B persona 1", "Actividad", "Semanas", "houseB-P1-historico")
ts.plot.save(houseB.P2.ts.act, "HistÃ³rico actividad casa B persona 2", "Actividad", "Semanas", "houseB-P2-historico")
# Descomponiendo aditivamente las series
ts.plot.save(decompose(houseA.P1.ts.act), "DescomposiciÃ³n aditiva casa A persona 1", "Actividad", "Semanas", "houseA-P1-historico")
ts.plot.save(houseA.P2.ts.act, "HistÃ³rico actividad casa A persona 2", "Actividad", "Semanas", "houseA-P2-historico")
ts.plot.save(houseB.P1.ts.act, "HistÃ³rico actividad casa B persona 1", "Actividad", "Semanas", "houseB-P1-historico")
ts.plot.save(houseB.P2.ts.act, "HistÃ³rico actividad casa B persona 2", "Actividad", "Semanas", "houseB-P2-historico")
# Series de tiempo acomuladas
## Importamos tablas de frecuencia
houseA.p1.freq <- read.csv("data/Frequency/houseA-p1-freqbyday.csv")
# Series de tiempo acomuladas
## Importamos tablas de frecuencia
houseA.p1.freq <- read.csv("../data/Frequency/houseA-p1-freqbyday.csv")
houseA.p2.freq <- read.csv("../data/Frequency/houseA-p2-freqbyday.csv")
houseB.p1.freq <- read.csv("../data/Frequency/houseB-p1-freqbyday.csv")
houseB.p2.freq <- read.csv("../data/Frequency/houseB-p2-freqbyday.csv")
houseA.p1.freq$Activities
houseB.p1.freq$Activities
# Explorando patrones
dash.ts.act('A','P2','Napping')
View(houseA.p1.freq)
# Explorando patrones
dash.ts.act('A','P2','Napping')
dash.ts.act('B','P1','Having Breakfast')
# Descomposicion
dash.dec.act('B','P2',"Toileting")
# Explorando relaciones
dash.ts.act.pers('A','P1',"Toileting", 'P2',"Toileting")
dash.ts.act.pers('B','P1',"Toileting", 'P1','Having Breakfast')
## Serie de tiempo multivariada del tiempo acomulado por actividad por persona
### Actividades por categorÃ­a
aseo         <-   c("Having_Shower", "Toileting","Brushing_Teeth")
salud        <-   c("Sleeping", "Napping", "Toileting")
alimentacion <-   c("Preparing_Breakfast", "Having_Breakfast", "Preparing_Lunch", "Having_Lunch", "Preparing_Dinner", "Having_Dinner", "Having_Snack")
internet     <-   c("Using_Internet")
ludico       <-   c("Watching_TV", "Reading_Book", "Using_Internet")
seguridad    <-   c("\tGoing_Out", "Sleeping", "Napping")
# Estudiando actividades por grupo
ts.plot(ts.multivar(houseA.p1.freq,seguridad,1,7))
ts.plot.save(ts.multivar(houseA.p1.freq,aseo,1,7), "HouseA-P1 activities history", "week", "hour", "houseA-P1-seguridad")
# LibrerÃ­as
library(dplyr)
library(tidyr)
library(reshape2)
library(imputeTS)
library(ggthemes)
library(zoo)
# Directorio de trabajo
repo.dir <- "C:/Users/luisf/Github/SmartHome-DataAnalytics"
setwd(repo.dir)
#Funciones
frec.comp <- function(df){
df.P1 <- table(df$P1, df$Day)
df.P2 <- table(df$P2, df$Day)
df.P1.m <- melt(df.P1)
df.P2.m <- melt(df.P2)
df.Frec <- merge(df.P1.m, df.P2.m, by=c("Var1", "Var2"), all.x=T)
df.Frec <- df.Frec[, c(2,1,3,4)]
names(df.Frec) <- c("Day", "Activity", "Freq.P1", "Freq.P2")
df.Frec <- mutate(df.Frec, Q=(Freq.P1/(Freq.P1+Freq.P2))-(Freq.P2/(Freq.P1+Freq.P2)))
return(df.Frec)
}
crear.ts <- function(df){
# Convert dataframe into a contingency table
df.tbl <- dcast(df, Day ~ Activity, value.var="Q")
# Removing columns with at least one NA value
df.tbl <- select_if(df.tbl[-1] , ~ !any(is.na(.)))
# Removing "0" column
df.tbl <- df.tbl[-1]
# Cleaning inf values
df.tbl <- do.call(data.frame,
lapply(df.tbl, function(x) replace(x, is.infinite(x),NA)))
# Converting houseA into a matrix
df.mat <- as.matrix(df.tbl)
df.ts <- ts(df.mat, start=1, end=30, frequency=1)
return(df.ts)
}
# ImportaciÃ³n de datasets
houseA <- read.csv("data/Time/houseA.csv")
houseB <- read.csv("data/Time/houseB.csv")
houseA <- mutate(houseA, time=as.POSIXct(time, format="%H:%M:%S"))
houseB <- mutate(houseB, time=as.POSIXct(time, format="%H:%M:%S"))
# House A
houseA.Frec <- frec.comp(houseA)
houseA.ts <- crear.ts(houseA.Frec)
tv.ts <- houseA.ts[,10]
(P <- autoplot(as.zoo(tv.ts), facet=NULL) +
theme_stata() + scale_fill_stata()  +
ggtitle(paste("Time series of Q - Watching tv")) +
labs(x = "Days", y = "Q"))
ggsave("A_tv_ts.png")
setwd("02_TimeSeries")
tv.ts <- houseA.ts[,10]
(P <- autoplot(as.zoo(tv.ts), facet=NULL) +
theme_stata() + scale_fill_stata()  +
ggtitle(paste("Time series of Q - Watching tv")) +
labs(x = "Days", y = "Q"))
ggsave("A_tv_ts.png")
dishes.ts <-houseA.ts[,9]
(P <- autoplot(as.zoo(dishes.ts), facet=NULL) +
theme_stata() + scale_fill_stata()  +
ggtitle(paste("Time series of Q - Washing dishes")) +
labs(x = "Days", y = "Q"))
ggsave("A_dishes_ts.png")
plot(na_interpolation(houseA.ts, option="linear"))
ggsave("Q_houseA.png")
plot(na_interpolation(houseB.ts, option="linear"))
ggsave("Q_houseB.png")
(plot(na_interpolation(houseA.ts, option="linear")))
(plot(na_interpolation(houseA.ts, option="linear")))
houseA.ts <- crear.ts(houseA.Frec)
# House A
houseA.Frec <- frec.comp(houseA)
houseA.ts <- crear.ts(houseA.Frec)
setwd("02_TimeSeries")
tv.ts <- houseA.ts[,10]
(P <- autoplot(as.zoo(tv.ts), facet=NULL) +
theme_stata() + scale_fill_stata()  +
ggtitle(paste("Time series of Q - Watching tv")) +
labs(x = "Days", y = "Q"))
(P <- autoplot(as.zoo(tv.ts), facet=NULL) +
theme_stata() + scale_fill_stata()  +
ggtitle(paste("Time series of Q - Watching tv")) +
labs(x = "Days", y = "Q"))
ggsave("A_tv_ts.png")
dishes.ts <-houseA.ts[,9]
(P <- autoplot(as.zoo(dishes.ts), facet=NULL) +
theme_stata() + scale_fill_stata()  +
ggtitle(paste("Time series of Q - Washing dishes")) +
labs(x = "Days", y = "Q"))
ggsave("A_dishes_ts.png")
(plot(na_interpolation(houseA.ts, option="linear")))
ggsave("Q_houseA.png")
plot(na_interpolation(houseB.ts, option="linear"))
houseB.Frec <- frec.comp(houseB)
houseB.ts <- crear.ts(houseB.Frec)
plot(na_interpolation(houseB.ts, option="linear"))
ggsave("Q_houseB.png")
setwd(repo.dir)
# LibrerÃ­as
library(dplyr)
library(tidyr)
library(reshape2)
library(imputeTS)
library(ggthemes)
library(zoo)
# Directorio de trabajo
repo.dir <- "C:/Users/luisf/Github/SmartHome-DataAnalytics"
setwd(repo.dir)
houseA <- read.csv('data/Aras/houseA_.csv')
houseA <- read.csv('data/Modified/houseA.csv')
# Tablas de contingencia de las dos casas para todas las actividades
houseA_f <- filter(houseA, P1 != 0, P2 != 0)
houseB_f <- filter(houseB, P1 != 0, P2 != 0)
tableA <- table(houseA_f$P1, houseA_f$P2)
rownames(tableA)[1] <- "Going_Out"
houseA <- read.csv('data/TimehouseA.csv')
houseB <- read.csv('data/Time/houseB.csv')
# Primero vamos a remover valores perdidos
# Tablas de contingencia de las dos casas para todas las actividades
houseA_f <- filter(houseA, P1 != 0, P2 != 0)
houseB_f <- filter(houseB, P1 != 0, P2 != 0)
tableA <- table(houseA_f$P1, houseA_f$P2)
tableA
houseA <- read.csv('data/Time/houseA.csv')
houseB <- read.csv('data/Time/houseB.csv')
# Primero vamos a remover valores perdidos
# Tablas de contingencia de las dos casas para todas las actividades
houseA_f <- filter(houseA, P1 != 0, P2 != 0)
houseB_f <- filter(houseB, P1 != 0, P2 != 0)
tableA <- table(houseA_f$P1, houseA_f$P2)
rownames(tableA)[1] <- "Going_Out"
tableA
colnames
colnames(tableA)[1] <- "Going_Out"
tableB <- table(houseB_f$P1, houseB_f$P2)
# Tablas de contingencia para cada persona de la casa
tableA_P1 <- table(houseA_f$P1)
tableA_P2 <- table(houseA_f$P2)
row.names(tableA_P1)[1] <- "Going_Out"
row.names(tableA_P2)[1] <- "Going_Out"
tableA_P1 <- tableA_P1[order(row.names(tableA_P1))]
tableA_P2 <- tableA_P2[order(row.names(tableA_P2))]
common_act_A <- intersect(row.names(tableA_P1),row.names(tableA_P2)) # Actividades en común casa A
# Aquí me doy cuenta que la persona 2 de la casa A no hace cleaning, having
# guest, having lunch ni preparing lunch pero sí shaving
tableA_P1_common <- tableA_P1[common_act_A]
tableA_P2_common <- tableA_P2[common_act_A]
tableB_P1 <- table(houseB_f$P1)
tableB_P2 <- table(houseB_f$P2)
tableB_P1 <- tableB_P1[order(row.names(tableB_P1))]
tableB_P2 <- tableB_P2[order(row.names(tableB_P2))]
common_act_B <- intersect(row.names(tableB_P1),row.names(tableB_P2)) # Actividades en común casa B
# Aquí me doy cuenta que la persona 2 de la casa B no hace cleaning, laundry,
# listening to music, preparing dinner, preparing lunch ni washing dishes
# pero sí napping, shaving
tableB_P1_common <- tableB_P1[common_act_B]
tableB_P2_common <- tableB_P2[common_act_B]
# Extrayendo actividades que las parejas hacen al mismo tiempo
both_A <- diag(as.matrix(tableA[common_act_A,common_act_A]))
both_B <- diag(as.matrix(tableB[common_act_B,common_act_B]))
# Chi cuadrada
houseA_table <- cbind(as.vector(tableA_P1_common),as.vector(tableA_P2_common),as.vector(both_A))
houseB_table <- cbind(as.vector(tableB_P1_common),as.vector(tableB_P2_common),as.vector(both_B))
rownames(houseA_table) <- common_act_A
colnames(houseA_table) <- c("P1","P2","Juntos")
rownames(houseB_table) <- common_act_B
colnames(houseB_table) <- c("P1","P2","Juntos")
act_triviales_HA_r <- c(1,2,3,10,14,15,20,23) # P1
act_triviales_HA_c <- c(1,2,3,7,11,12,16,17,20) # P2
act_triviales_HB_r <- c(1,2,4,9,13,18,21) # P1
act_triviales_HB_c <- c(1,2,3,8,10,11,14,15,18) # P2
tableA_f <- tableA[-act_triviales_HA_r,-act_triviales_HA_c]
tableB_f <- tableB[-act_triviales_HB_r,-act_triviales_HB_c]
houseA_table <- subset(houseA_table, rownames(houseA_table) %in% rownames(tableA_f))
houseB_table <- subset(houseB_table, rownames(houseB_table) %in% rownames(tableB_f))
chisqA <- chisq.test(houseA_table)
chisqA$observed
round(chisqA$expected,2)
round(chisqA$residuals, 3)
library(corrplot)
library(ggplot2)
library(corrplot)
residualsA <- corrplot(t(chisqA$residuals), is.cor = FALSE,
title = "Residuales Casa A")
chisqA <- chisq.test(houseA_table)
chisqA$observed
round(chisqA$expected,2)
round(chisqA$residuals, 3)
residualsA <- corrplot(t(chisqA$residuals), is.cor = FALSE,
title = "Residuales Casa A")
chisqB <- chisq.test(houseB_table)
chisqB$observed
round(chisqB$expected,2)
round(chisqB$residuals, 3)
residualsB <- corrplot(t(chisqB$residuals), is.cor = FALSE,
title = "Residuales Casa B")
# P1 casa A (cleaning, having breakfast, laundry, listening to music)
p1_A_ind <- c(1,2,8,9)
# P2 casa A (having breakfast, laundry, listening to music, preparing
# breakfast)
p2_A_ind <- c(1,5,6,7)
# P1 casa B (having snack, laundry, listening to music, talking on the phone)
p1_B_ind <- c(6,7,8,14)
# P2 casa B (having snack, preparing breakfast, talking on the phone)
p2_B_ind <- c(5,6,9)
tableA_f2 <- tableA_f[-p1_A_ind,-p2_A_ind]
tableB_f2 <- tableB_f[-p1_B_ind,-p2_B_ind]
# Cambiando los nombres de las tareas a números por cuestiones de practicidad
P1_act_A <- rownames(tableA_f2)
P2_act_A <- colnames(tableA_f2)
P1_act_B <- rownames(tableB_f2)
P2_act_B <- colnames(tableB_f2)
rownames(tableA_f2) <- c(1:length(rownames(tableA_f2)))
colnames(tableA_f2) <- c(1:length(colnames(tableA_f2)))
rownames(tableB_f2) <- c(1:length(rownames(tableB_f2)))
colnames(tableB_f2) <- c(1:length(colnames(tableB_f2)))
# Visualización de actividades no triviales ni individuales de cada casa
library("graphics")
mosaicplot(tableA_f2, shade = TRUE, main = "Actividades en casa A", xlab =
"Actividades de P1", ylab = "Actividades de P2")
mosaicplot(tableB_f2, shade = TRUE, main = "Actividades en casa B", xlab =
"Actividades de P1", ylab = "Actividades de P2")
library("vcd")
assoc(tableA_f2, shade = TRUE, las = 3)
assoc(tableB_f2, shade = TRUE, las = 3)
